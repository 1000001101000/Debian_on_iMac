name: Generate new images if needed

on:
  push:
    paths: 
      - '.github/workflows/*.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    container: 'debian:9'
    env:
      repo_dir: .
      build_needed: yes
    steps: 
    - name: update apt
      run: apt-get update
    
    - name: install curl
      run: apt-get -y install curl
    
    ##check for build flag, 
    #- name: check for the build needed flag
    #  run: echo "::set-env name=build_needed::$(curl -sL https://github.com/1000001101000/Debian_on_Intel_Terastations/raw/master/.rebuild 2>/dev/null)"  
    
    - name: configure silent grub install
      run: echo "grub-pc grub-pc/install_devices_empty   boolean true" | debconf-set-selections
      
    - name: ensure build packages are installed
      if: env.build_needed == 'yes'
      run: apt-get -y install gzip rsync wget cpio grub2 xorriso mtools git 
    
    - name: if needed, clone the repo for build
      if: env.build_needed == 'yes'
      run: git clone https://github.com/${{github.repository}}; echo "::set-env name=repo_dir::$(ls -rt | tail -n 1)"
    
    - name: set git user name
      if: env.build_needed == 'yes'
      run: git config user.name "workflow@github"; git config user.email "workflow@github"
      working-directory: "${{env.repo_dir}}"
    
    #- name: build stretch installer
    #  if: env.build_needed == 'yes'
    #  run: cd installer-image/Stretch/build/; ./generate_images.sh
    #  working-directory: "${{env.repo_dir}}"
    
    #- name: copy stretch image to repo
    #  if: env.build_needed == 'yes'
    #  run: cp installer-image/Stretch/build/output/*.iso installer-image/Stretch/
    #  working-directory: "${{env.repo_dir}}"
      
    #- name: update stretch base installer hash
    #  if: env.build_needed == 'yes'
    #  run: cat installer-image/Stretch/build/debian-files/mini.iso | md5sum > installer-image/Stretch/build/last_build.txt
    #  working-directory: "${{env.repo_dir}}"
      
    - name: build buster installer
      if: env.build_needed == 'yes'
      run: cd Buster/build/; ./generate_images.sh
      working-directory: "${{env.repo_dir}}"
      
    - name: copy buster image to repo
      if: env.build_needed == 'yes'
      run: cp Buster/build/output/*.iso Buster/installer-image/; git add Buster/installer-image/*
      working-directory: "${{env.repo_dir}}"
      
   # - name: update buster base installer hash
   #   if: env.build_needed == 'yes'
   #   run: cat installer-image/Buster/build/debian-files/mini.iso | md5sum > installer-image/Buster/build/last_build.txt
   #   working-directory: "${{env.repo_dir}}"
    
    - name: clear rebuild needed flag 
      if: env.build_needed == 'yes'
      run: echo no > .rebuild
      working-directory: "${{env.repo_dir}}"
      
    - name: if needed, commit
      if: env.build_needed == 'yes'
      run: git commit -v -a -m "update files from external projects"
      working-directory: "${{env.repo_dir}}"
  
    - name: commit new images
      if: env.build_needed == 'yes'
      run: git push https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git HEAD:master
      working-directory: "${{env.repo_dir}}"
      
  convert:
    needs: build
    runs-on: [macos]
    env:
      repo_dir: .
    steps:
     - uses: actions/checkout@v2
     - run: git clone https://github.com/${{github.repository}}; echo "::set-env name=repo_dir::$(ls -rt | tail -n 1)"
     - run: rm Buster/installer-image/iMac-buster-installer.dmg
       working-directory: "${{env.repo_dir}}"
     - run: hdiutil convert Buster/installer-image/iMac-buster-installer.iso -format UDRW -o Buster/installer-image/iMac-buster-installer
       working-directory: "${{env.repo_dir}}"
     - run: md5sum Buster/installer-image/*
       working-directory: "${{env.repo_dir}}"
     - run: git config user.name "workflow@github"; git config user.email "workflow@github"
       working-directory: "${{env.repo_dir}}"
     - run: git commit -v -a -m "update files from external projects"
       working-directory: "${{env.repo_dir}}"
     - run: git push https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git HEAD:master
       working-directory: "${{env.repo_dir}}"
    
